AWSTemplateFormatVersion: '2010-09-09'

##########################################################################################
# Transform required for serverless components like Lambda
##########################################################################################
Transform: AWS::Serverless-2016-10-31

Description: >
  Very simple web application using Lambda, Apigateway, S3, dynamodb and cognito

Resources:

  ##########################################################################################
  # StaticWebSiteBucket
  ##########################################################################################
  DummyBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "za-dummy-bucket"

  StaticWebSiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "za-static-web-site-bucket"

  WebSiteReadPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref StaticWebSiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        -
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt WebSiteAccessIdentity.S3CanonicalUserId
          Action: s3:GetObject
          Resource: !Sub "arn:aws:s3:::${StaticWebSiteBucket}/*"



  ####### ##      #######  ##     ## ########  ######## ########   #######  ##    ## ########
 ##       ##     ##     ## ##     ## ##     ## ##       ##     ## ##     ## ###   ##    ##
##        ##     ##     ## ##     ## ##     ## #######  ##     ## ##     ## ####  ##    ##
##        ##     ##     ## ##     ## ##     ## ##       ########  ##     ## ## ## ##    ##
##        ##     ##     ## ##     ## ##     ## ##       ##     ## ##     ## ##  ####    ##
 ##       ##     ##     ## ##     ## ##     ## ##       ##     ## ##     ## ##   ###    ##
  ####### ######  #######   #######  ########  ##       ##     ##  #######  ##    ##    ##

  WebSiteAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref StaticWebSiteBucket

  webSiteDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        CustomErrorResponses:
        - ErrorCode: 403 # not found
          ResponseCode: 404
          ResponsePagePath: "/404.html"
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          Compress: true
          DefaultTTL: 60 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 60 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: "allow-all"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName: !GetAtt 'StaticWebSiteBucket.DomainName'
          OriginPath: '/za-code-deploy/web'
          Id: s3origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${WebSiteAccessIdentity}'
        Aliases:
        - "kmeson.com"
        ViewerCertificate:
          AcmCertificateArn: 'arn:aws:acm:us-east-1:052277535492:certificate/ff5a45fa-7c29-453b-a96e-6f6f6aa9324d'
          SslSupportMethod: 'sni-only'
        PriceClass: 'PriceClass_All'
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - DE
            - CH
            - AT

  R53RecordSetIPv4:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: 'kmeson.com.'
      AliasTarget:
        DNSName: !GetAtt webSiteDistribution.DomainName
# see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
        HostedZoneId: 'Z2FDTNDATAQYW2' # HostedZoneId of CloudFront!!!
      HostedZoneId: 'Z2ZHR0TFXKH3HH'   # My HostedZoneId for kmeson.com.
      Type: 'A'

  R53RecordSetIPv6:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: 'kmeson.com.'
      AliasTarget:
        DNSName: !GetAtt webSiteDistribution.DomainName
# see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
        HostedZoneId: 'Z2FDTNDATAQYW2' # HostedZoneId of CloudFront!!!
      HostedZoneId: 'Z2ZHR0TFXKH3HH'   # My HostedZoneId for kmeson.com.
      Type: 'AAAA'


########  ##    ## ##    ##    ###    ##     ##  #######  ########  ########
##     ##  ##  ##  ###   ##   ## ##   ###   ### ##     ## ##     ## ##     ##
##     ##   ####   ####  ##  ##   ##  #### #### ##     ## ##     ## ##     ##
##     ##    ##    ## ## ## ##     ## ## ### ## ##     ## ##     ## ########
##     ##    ##    ##  #### ######### ##     ## ##     ## ##     ## ##     ##
##     ##    ##    ##   ### ##     ## ##     ## ##     ## ##     ## ##     ##
########     ##    ##    ## ##     ## ##     ##  #######  ########  ########


  ##########################################################################################
  # Rides DynamoDB Table
  ##########################################################################################
  rideTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "RideId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "RideId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Rides"

##          ###    ##     ## ########  ########     ###
##         ## ##   ###   ### ##     ## ##     ##   ## ##
##        ##   ##  #### #### ##     ## ##     ##  ##   ##
##       ##     ## ## ### ## ########  ##     ## ##     ##
##       ######### ##     ## ##     ## ##     ## #########
##       ##     ## ##     ## ##     ## ##     ## ##     ##
######## ##     ## ##     ## ########  ########  ##     ##


  ##########################################################################################
  # Ride Creation
  ##########################################################################################
  rideCreationFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Function to create Rides
      Runtime: python3.6
      Handler: writer.lambda_handler
      CodeUri: ./src/lambda/writer.py
      Role: !Sub ${LambdaAccessToDynamoRole.Arn}
      MemorySize: 128
      Timeout: 3

  getAllRidesFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Function to read all Rides
      Runtime: python3.6
      Handler: getall.lambda_handler
      CodeUri: ./src/lambda/getall.py
      Role: !Sub ${LambdaAccessToDynamoRole.Arn}
      MemorySize: 128
      Timeout: 3

####    ###    ##     ##
 ##    ## ##   ###   ###
 ##   ##   ##  #### ####
 ##  ##     ## ## ### ##
 ##  ######### ##     ##
 ##  ##     ## ##     ##
#### ##     ## ##     ##


  ##########################################################################################
  # API to access CloudWatch
  ##########################################################################################
  CloudWatchRole:
   Type: "AWS::IAM::Role"
   Properties:
    AssumeRolePolicyDocument:
     Version: "2012-10-17"
     Statement:
      - Effect: Allow
        Principal:
         Service:
          - "apigateway.amazonaws.com"
        Action: "sts:AssumeRole"
    Path: "/"
    ManagedPolicyArns:
     - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"


  ##########################################################################################
  # Lambda to access Dynamo
  ##########################################################################################
  LambdaAccessToDynamoRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Sid: "AllowLambdaServiceToAssumeRole"
          Effect: "Allow"
          Action:
          - "sts:AssumeRole"
          Principal:
            Service:
            - "lambda.amazonaws.com"
      Policies:
      -   PolicyName: "AllowCRUDOperationsOnDynamoDB"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            -
              Effect: "Allow"
              Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:Scan'
              - 'dynamodb:DescribeTable'
#              - 'dynamodb:List*'
#              - 'dynamodb:DeleteItem'
              - 'dynamodb:UpdateItem'
              Resource:
              - !Sub ${rideTable.Arn}
              - !Sub ${rideTable.Arn}/index/*

  ##########################################################################################
  # API to call lambda
  ##########################################################################################
  APIAccessToLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
              - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
#      ManagedPolicyArns:
#        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      Policies:
        - PolicyName: "LambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"                     # !GetAtt "getAllRidesFunction.Arn"


   ###     ######   ####
  ## ##    ##   ##   ##
 ##   ##   ##    ##  ##
##     ##  ##   ##   ##
#########  #####     ##
##     ##  ##        ##
##     ##  ##       ####

  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "rides-api"
      Description: "Rides API"

  ##########################################################################################
  # api resource
  ##########################################################################################
  apiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
        - apiGateway
        - RootResourceId
      PathPart: api
      RestApiId:
        Ref: apiGateway

  ##########################################################################################
  # v1 resource
  ##########################################################################################
  apiV1Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Ref: apiResource
      PathPart: v1
      RestApiId:
        Ref: apiGateway

  ##########################################################################################
  # rides V1 resource
  ##########################################################################################
  ridesV1Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Ref: apiV1Resource
      PathPart: rides
      RestApiId:
        Ref: apiGateway

  ##########################################################################################
  # GET rides Method
  ##########################################################################################
  getRidesMethodV1:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "getAllRidesFunction.Arn"
        Credentials: !GetAtt "APIAccessToLambdaRole.Arn"
      ResourceId:
        !Ref "ridesV1Resource"
      RestApiId:
        !Ref "apiGateway"

  ##########################################################################################
  # POST  A Ride Method
  ##########################################################################################
  createRidesMethodV1:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "rideCreationFunction.Arn"
        Credentials: !GetAtt "APIAccessToLambdaRole.Arn"
      ResourceId:
        !Ref "ridesV1Resource"
      RestApiId:
        !Ref "apiGateway"


  rideCreationFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - rideCreationFunction
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        -
          - "arn:aws:execute-api:"
          - !Ref "AWS::Region"
          - ":"
          - !Ref "AWS::AccountId"
          - ":"
          - !Ref "apiGateway"
          - "/*"
#          - "/*/POST/*"


  ##########################################################################################
  # API Stage
  ##########################################################################################
  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "createRidesMethodV1"
      - "getRidesMethodV1"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: "DEV"

Outputs:
  GetRidesMethodArn:
    Description: "Arn of Get Rides Method"
    Value: !GetAtt "getAllRidesFunction.Arn"
  PermissionSourceArn:
    Description: "Source Arn use for Permission"
    Value: !Join
      - ""
      -
        - "arn:aws:execute-api:"
        - !Ref "AWS::Region"
        - ":"
        - !Ref "AWS::AccountId"
        - ":"
        - !Ref "apiGateway"
        - "/*"
  BucketDomainName:
    Description: "Domain Name of Bucket"
    Value: !GetAtt 'StaticWebSiteBucket.DomainName'
  WebSiteAccessIdentity:
    Description: "Website Access Identity"
    Value: !Ref WebSiteAccessIdentity
  CanonicalUserId:
    Description: "Canonical User Id"
    Value: !GetAtt
      - "WebSiteAccessIdentity"
      - "S3CanonicalUserId"
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref webSiteDistribution
  DistributionDomain:
    Description: 'Cloudfront Distribution Domain'
    Value: !GetAtt webSiteDistribution.DomainName
