AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Very simple web application using Lambda, Apigateway, S3, dynamodb and
  cognito

  '
Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: wild-static-web-content
      WebsiteConfiguration:
        IndexDocument: index.html
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebsiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${WebsiteBucket}/*
  StaticWebSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: za-static-web-site-bucket
  WebSiteReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticWebSiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            CanonicalUser:
              Fn::GetAtt:
              - WebSiteAccessIdentity
              - S3CanonicalUserId
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${StaticWebSiteBucket}/*
  WebSiteAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Ref: StaticWebSiteBucket
  webSiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
        - ErrorCode: 403
          ResponseCode: 404
          ResponsePagePath: /404.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          Compress: true
          DefaultTTL: 60
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 600
          MinTTL: 60
          TargetOriginId: s3origin
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName:
            Fn::GetAtt:
            - StaticWebSiteBucket
            - DomainName
          Id: s3origin
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${WebSiteAccessIdentity}
        PriceClass: PriceClass_All
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - DE
            - CH
            - AT
  rideTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: RideId
        AttributeType: S
      KeySchema:
      - AttributeName: RideId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: Rides
  rideCreationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to create Rides
      Runtime: python3.6
      Handler: writer.lambda_handler
      CodeUri: s3://za-wild-poc/f30133408648b95d614105c72a44394e
      Role:
        Fn::Sub: ${LambdaAccessToDynamoRole.Arn}
      MemorySize: 128
      Timeout: 3
  getAllRidesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to read all Rides
      Runtime: python3.6
      Handler: getall.lambda_handler
      CodeUri: s3://za-wild-poc/1ef29593bbf7e6cb6c38ef3f5a5eeb62
      Role:
        Fn::Sub: ${LambdaAccessToDynamoRole.Arn}
      MemorySize: 128
      Timeout: 3
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  LambdaAccessToDynamoRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowLambdaServiceToAssumeRole
          Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: AllowCRUDOperationsOnDynamoDB
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:GetRecords
            - dynamodb:Scan
            - dynamodb:UpdateItem
            Resource:
            - Fn::Sub: ${rideTable.Arn}
            - Fn::Sub: ${rideTable.Arn}/index/*
  APIAccessToLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: rides-api
      Description: Rides API
  apiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - apiGateway
        - RootResourceId
      PathPart: api
      RestApiId:
        Ref: apiGateway
  apiV1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: apiResource
      PathPart: v1
      RestApiId:
        Ref: apiGateway
  ridesV1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: apiV1Resource
      PathPart: rides
      RestApiId:
        Ref: apiGateway
  getRidesMethodV1:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn:
              Fn::GetAtt:
              - getAllRidesFunction
              - Arn
        Credentials:
          Fn::GetAtt:
          - APIAccessToLambdaRole
          - Arn
      ResourceId:
        Ref: ridesV1Resource
      RestApiId:
        Ref: apiGateway
  createRidesMethodV1:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn:
              Fn::GetAtt:
              - rideCreationFunction
              - Arn
        Credentials:
          Fn::GetAtt:
          - APIAccessToLambdaRole
          - Arn
      ResourceId:
        Ref: ridesV1Resource
      RestApiId:
        Ref: apiGateway
  rideCreationFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - rideCreationFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: apiGateway
          - /*
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - createRidesMethodV1
    - getRidesMethodV1
    Properties:
      RestApiId:
        Ref: apiGateway
      StageName: DEV
Outputs:
  GetRidesMethodArn:
    Description: Arn of Get Rides Method
    Value:
      Fn::GetAtt:
      - getAllRidesFunction
      - Arn
  PermissionSourceArn:
    Description: Source Arn use for Permission
    Value:
      Fn::Join:
      - ''
      - - 'arn:aws:execute-api:'
        - Ref: AWS::Region
        - ':'
        - Ref: AWS::AccountId
        - ':'
        - Ref: apiGateway
        - /*
  BucketDomainName:
    Description: Domain Name of Bucket
    Value:
      Fn::GetAtt:
      - WebsiteBucket
      - DomainName
  WebSiteAccessIdentity:
    Description: Website Access Identity
    Value:
      Ref: WebSiteAccessIdentity
  CanonicalUserId:
    Description: Canonical User Id
    Value:
      Fn::GetAtt:
      - WebSiteAccessIdentity
      - S3CanonicalUserId
  DistributionId:
    Description: CloudFront Distribution ID
    Value:
      Ref: webSiteDistribution
  DistributionDomain:
    Description: Cloudfront Distribution Domain
    Value:
      Fn::GetAtt:
      - webSiteDistribution
      - DomainName
